// - ------------------------------------------------------------------------------------------ - //
// vec2, vec3, and vec4 removed. Now entirely native.
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// 1D Vector (i.e. float, so we don't use a class, but instead set delegates) //
// - ------------------------------------------------------------------------------------------ - //
{
	// - -------------------------------------------------------------------------------------- - //
	local fd = sqext_getfloatdelegate();
	// - -------------------------------------------------------------------------------------- - //
	fd.magnitude <- function() {
		return abs(this);
	}
	// - -------------------------------------------------------------------------------------- - //
	fd.magnitudesquared <- function() {
		return this*this;
	}
	// - -------------------------------------------------------------------------------------- - //
	fd.manhattan <- function() {
		return abs(this);
	}
	// - -------------------------------------------------------------------------------------- - //
	fd.normal <- function() {
		if ( this > 0.0 )
			return 1.0;
		else if ( this < 0.0 )
			return -1.0;
		else
			return 0.0;
	}
	// - -------------------------------------------------------------------------------------- - //
	fd.normalize <- function() {
		if ( this > 0.0 )
			this = 1.0;
		else if ( this < 0.0 )
			this = -1.0;
		else
			this = 0.0;
		return this;
	}
	// - -------------------------------------------------------------------------------------- - //
	fd.normalizeret <- function() {
		local Ret = this.magnitude();
		if ( this > 0.0 )
			this = 1.0;
		else if ( this < 0.0 )
			this = -1.0;
		else
			this = 0.0;
		return Ret;
	}
	// - -------------------------------------------------------------------------------------- - //
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Dot Product - Call the internal Dot Product function //
// - ------------------------------------------------------------------------------------------ - //
function dot(a,b) {
	return a.dot(b);
}
// - ------------------------------------------------------------------------------------------ - //
// Cross Product - Call the internal Cross Product function //
// - ------------------------------------------------------------------------------------------ - //
function cross(a,b) {
	return a.cross(b);
}
// - ------------------------------------------------------------------------------------------ - //
// Mix - Call the internal Mix function //
// - ------------------------------------------------------------------------------------------ - //
function mix(a,b,alpha) {
	return a.mix(b,alpha);
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Smart vector function that constructs the appropriate vector type depending on number of args. //
// - ------------------------------------------------------------------------------------------ - //
function vec(...) {
	local Len = vargv.len();
	
	if ( Len == 1 )
		return scalar(vargv);
	else if ( Len == 2 )
		return vec2(vargv);
	else if ( Len == 3 )
		return vec3(vargv);
	else if ( Len == 4 )
		return vec4(vargv);

	error( "Invalid vec type: vec\n" + Len );

	return null;
}
// - ------------------------------------------------------------------------------------------ - //
