// - ------------------------------------------------------------------------------------------ - //
#ifndef __GEL_Graphics_Color_H__
#define __GEL_Graphics_Color_H__
// - ------------------------------------------------------------------------------------------ - //
#include <Graphics/GelColor.h>
// - ------------------------------------------------------------------------------------------ - //
#include "Native/OpenGL/GELS_Color.h"
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Apply changes the actual Color //
// - ------------------------------------------------------------------------------------------ - //
inline void gelApplyColor( const GelColor Color ) {
#ifdef GELS_APPLY_COLOR
	gels_ApplyColor( Color );
#endif // GELS_APPLY_COLOR //	
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Set applies the color and notes the color as the global color //
// - ------------------------------------------------------------------------------------------ - //
inline void gelSetColor( const GelColor Color ) {
	Current::Color = Color;
	gelApplyColor( Current::Color );
}
// - ------------------------------------------------------------------------------------------ - //
inline void gelSetColor( const int r, const int g, const int b, const int a = 255 ) {
	gelSetColor( GEL_RGBA(r,g,b,a) );
}
// - ------------------------------------------------------------------------------------------ - //
// SetOnly sets the value noted as the internal default color, but doesn't apply it //
// - ------------------------------------------------------------------------------------------ - //
inline void gelSetOnlyColor( const GelColor Color ) {
	Current::Color = Color;
}
// - ------------------------------------------------------------------------------------------ - //
inline void gelSetOnlyColor( const int r, const int g, const int b, const int a = 255 ) {
	gelSetOnlyColor( GEL_RGBA(r,g,b,a) );
}
// - ------------------------------------------------------------------------------------------ - //
// Restore the global color previously set with gelSetColor or gelSetOnlyColor //
// - ------------------------------------------------------------------------------------------ - //
inline void gelRestoreColor( const GelColor Color ) {
	// TODO: remove me //
	gelApplyColor( Current::Color );
}
// - ------------------------------------------------------------------------------------------ - //
inline void gelRestoreColor() {
	gelApplyColor( Current::Color );
}
// - ------------------------------------------------------------------------------------------ - //
// Return the global color //
// - ------------------------------------------------------------------------------------------ - //
inline GelColor gelGetColor() {
	return Current::Color;
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// TODO: Currently unused, so update these //
// - ------------------------------------------------------------------------------------------ - //
inline void gelSetNormalColor( const GelColor Color ) {
	Current::NormalColor = Color;
}
// - ------------------------------------------------------------------------------------------ - //
inline void gelSetNormalColor( const int r, const int g, const int b, const int a = 255 ) {
	Current::NormalColor = GEL_RGBA(r,g,b,a);
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
inline void gelSetNormalLength( const Real NormalLength ) {
	Current::NormalLength = NormalLength;
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
#endif // __GEL_Graphics_Color_H__ //
// - ------------------------------------------------------------------------------------------ - //
