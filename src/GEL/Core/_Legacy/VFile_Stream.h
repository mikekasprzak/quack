// - ------------------------------------------------------------------------------------------ - //
// VFile Stream - VFile functions adapted to Stream syntax.
// - ------------------------------------------------------------------------------------------ - //
#ifndef __Library_Data_VFile_Stream_H__
#define __Library_Data_VFile_Stream_H__
// - ------------------------------------------------------------------------------------------ - //
#include "Stream_Core.h"
#include "VFile_Core.h"
// - ------------------------------------------------------------------------------------------ - //
//namespace Data {
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Get the size of an open file, in bytes //
// - ------------------------------------------------------------------------------------------ - //
inline const size_t size_Stream( VFILE* fp ) {
	return size_VFile( fp );
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Opening Stream //
// - ------------------------------------------------------------------------------------------ - //
template<>
inline VFILE* open_Stream<VFILE>( const char* ) {
	return open_VFile();
}
// - ------------------------------------------------------------------------------------------ - //
template<>
inline VFILE* open_Stream<VFILE>( const char*, const char* ) {
	return open_VFile();
}
// - ------------------------------------------------------------------------------------------ - //
template<>
inline VFILE* open_readonly_Stream<VFILE>( const char* ) {
	return open_readonly_VFile();
}
// - ------------------------------------------------------------------------------------------ - //
template<>
inline VFILE* open_writeonly_Stream<VFILE>( const char* ) {
	return open_writeonly_VFile();
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Closing Stream //
// - ------------------------------------------------------------------------------------------ - //
inline void close_Stream( VFILE* fp ) {
	close_VFile( fp );
}
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
// Templated read functions (read_File<int>( fp );) //
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const Type read_Stream( VFILE* fp ) {
	return read_VFile<Type>( fp );
}
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const Type readswap_Stream( VFILE* fp ) {
	return readswap_VFile<Type>( fp );
}
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const Type readbe_Stream( VFILE* fp ) {
	return readbe_VFile<Type>( fp );
}
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const Type readle_Stream( VFILE* fp ) {
	return readle_VFile<Type>( fp );
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
inline const size_t read_Stream( VFILE* fp, char* Data, const size_t Size ) {
	return read_VFile( fp, Data, Size );
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Templated read functions (read_File<int>( fp );) //
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const size_t write_Stream( VFILE* fp, const Type Data ) {
	return write_VFile( fp, Data );
}
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const size_t writeswap_Stream( VFILE* fp, const Type Data ) {
	return writeswap_VFile( fp, Data );
}
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const size_t writebe_Stream( VFILE* fp, const Type Data ) {
	return writebe_VFile( fp, Data );
}
// - ------------------------------------------------------------------------------------------ - //
template< class Type >
inline const size_t writele_Stream( VFILE* fp, const Type Data ) {
	return writele_VFile( fp, Data );
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
inline const size_t write_Stream( VFILE* fp, const char* Data, const size_t Size ) {
	return write_VFile( fp, Data, Size );
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
//}; // namespace Data //
// - ------------------------------------------------------------------------------------------ - //
#endif // __Library_Data_VFile_Stream_H__ //
// - ------------------------------------------------------------------------------------------ - //
