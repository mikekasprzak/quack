# - ------------------------------------------------------------------------ - #
# Platform Specific Target Influencing Defines #
USES_ANDROID		:=	true		# OS #
USES_MOBILE			:=	true		# OS MODE #
USES_GCC			:=	true		# Compiler Suite (For completeness) #
# - ------------------------------------------------------------------------ - #
USES_LOGCAT			:=	true		# FileLog Output to use #
USES_LESS_NEWLINES	:=	true		# Don't output extra newline (\n) in logs #
USES_EXTRA_QUOTES	:=	true		# Use Extra Quotes around -D strings #
# - ------------------------------------------------------------------------ - #
# DON'T FORGET TO REPLICATE ALL THE ABOVE HERE! #
# - ------------------------------------------------------------------------ - #
DEFINES				+=	USES_ANDROID USES_MOBILE USES_GCC
DEFINES				+=	USES_LOGCAT USES_LESS_NEWLINES USES_EXTRA_QUOTES
# - ------------------------------------------------------------------------ - #


# - ------------------------------------------------------------------------ - #
CPUFLAGS			:=	
# - ------------------------------------------------------------------------ - #
# Compiler and Linker Flags (specific to this target) #
CFLAGS				+=	$(CPUFLAGS) 
CPPFLAGS			+=	$(CPUFLAGS) -fexceptions
LDFLAGS				+=	
# - ------------------------------------------------------------------------ - #
LIBRARIES			+=	
# - ------------------------------------------------------------------------ - #
# Release Build Only #
ifdef NDEBUG
LDFLAGS				+=	
endif
# - ------------------------------------------------------------------------ - #
# File extension for the Binary (.exe on Windows, .i686 .x86_64 on Linux) #
BINARY_SUFFIX		:=	.so
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
# Graphical Applications on Windows use SDL2 and OpenGL. This decides which GL #
# - ------------------------------------------------------------------------ - #
ifdef USES_GRAPHICS				# Has Graphics #
# - ------------------------------------------------------------------------ - #
USES_SDL2			:=	true	# Uses Simple Directmedia Layer 2 API #
USES_OPENGL			:=	true	# Uses one of the "OpenGL Family" of APIs #
USES_OPENGL_ES		:=	true	# Uses one of the OpenGL ES APIs #
# - ------------------------------------------------------------------------ - #
ifdef USES_SHADERS				# Graphics with Shaders #
ifdef USES_BATCHING				# Graphics with Shaders and Advanced Batching #
# - ------------------------------------------------------------------------ - #
USES_OPENGL_ES3		:=	true	# Use OpenGL ES3 with its advanced batching #
USES_OPENGL_ES2		:=	true	# GL3 is backwards compatible, so GL2 is ok #
# - ------------------------------------------------------------------------ - #
else  # !USES_BATCHING #
# - ------------------------------------------------------------------------ - #
USES_OPENGL_ES2		:=	true	# Use OpenGL ES2 with standard batching (VBO) #
# - ------------------------------------------------------------------------ - #
endif # USES_BATCHING #
else  # !USES_SHADERS #
# - ------------------------------------------------------------------------ - #
USES_OPENGL_ES1		:=	true	# Use OpenGL ES1 (GLES without shaders) #
# - ------------------------------------------------------------------------ - #
endif # USES_SHADERS #
# - ------------------------------------------------------------------------ - #
endif # USES_GRAPHICS #
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
ifdef USES_AUDIO
# - ------------------------------------------------------------------------ - #
#USES_SDLMIXER		:=	true	# Use SDL's Standard Addon Audio Library #
# - ------------------------------------------------------------------------ - #
endif # USES_AUDIO #
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
include target/Common/common_libraries
# - ------------------------------------------------------------------------ - #
include target/Common/common_makefile
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
# ANDROID NOTES: ndk-build scripts automatically replace ".." with "__" in output #
# - ------------------------------------------------------------------------ - #
# This was $(TARGET).mk #
output/$(TARGET_NAME)/Android.mk: $(TARGET_STUBS) always
	@echo "# Generated by 'common_generate_makefile'" >$@
	@echo "CODE_FILES := $(CODE_FILES)" >>$@
	@echo "CFLAGS := $(CFLAGS)" >>$@
	@echo "CPPFLAGS := $(CPPFLAGS)" >>$@
	@echo "LDFLAGS := $(LDFLAGS)" >>$@
	@echo "DEFINES := $(DEFINES_ORIGINAL)" >>$@
	@echo "INCLUDES := $(INCLUDES_ORIGINAL)" >>$@
	@echo "LIBRARIES := $(LIBRARIES)" >>$@
	@echo "-------------------------------------------------------------------------"
	@echo "Finished generating makefile."
	@echo "Next open a Cygwin shell, browse to src/SDLAndroid, and do the following:"
	@echo "  ndk-build     (to compile native code (gnu make))"
	@echo "  ant debug     (to build the debug .apk file)"
	@echo "  ant installd  (to install the debug build on device)"
	@echo "  ./run.sh      (to run the app)"
	@echo "  ./stop.sh     (to stop the app)"
	@echo "(optionally 'ant release' and 'ant installr' for release builds)"
	@echo "('adb logcat' to view realtime logs, 'adb shell' to exec remote commands')"
	@echo "('adb push' to send files to device, 'adb devices' to see if connected)" 
	@echo "-------------------------------------------------------------------------"
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
# Yes, this creates the output folder, but notes the creation under obj #
obj/$(TARGET_NAME)/output_stub:
	mkdir -p output/$(TARGET_NAME) obj/$(TARGET_NAME)
	@touch $@	
# - ------------------------------------------------------------------------ - #
always:
# - ------------------------------------------------------------------------ - #
.PHONY: always
# - ------------------------------------------------------------------------ - #
