// - ------------------------------------------------------------------------------------------ - //
#ifndef __GEL_CORE_URLHandle_H__
#define __GEL_CORE_URLHandle_H__
// - ------------------------------------------------------------------------------------------ - //
#include <stdio.h>
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
typedef FILE URLHandle;
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
// Opening files //
// - ------------------------------------------------------------------------------------------ - //
inline URLHandle* open_URLHandle( const char* _FileName, const char* _OpenMask = "rb" ) {
	return (URLHandle*)fopen( _FileName, _OpenMask );
}
// - ------------------------------------------------------------------------------------------ - //
inline URLHandle* open_readonly_URLHandle( const char* _FileName ) {
	return (URLHandle*)fopen( _FileName, "rb" );
}
// - ------------------------------------------------------------------------------------------ - //
// Closing Files //
// - ------------------------------------------------------------------------------------------ - //
inline void close_URLHandle( URLHandle* fp ) {
	fclose( fp );
}
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
// Get the size of a file in bytes //
// - ------------------------------------------------------------------------------------------ - //
inline const size_t size_URLHandle( const char* _FileName ) {
	// Open File //
	URLHandle* fp = open_URLHandle( _FileName );
	if ( fp == 0 ) {
		return 0;
	}
	
	// Determine how large file is //
	fseek( (FILE*)fp, 0, SEEK_END );
	size_t Size = ftell( (FILE*)fp );
	
	// Close file //
	close_URLHandle( fp );
	
	// Return data //
	return Size;
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Get the size of an open file, in bytes //
// - ------------------------------------------------------------------------------------------ - //
inline const size_t size_URLHandle( URLHandle* fp ) {
	size_t Position = ftell( (FILE*)fp );
	
	fseek( (FILE*)fp, 0, SEEK_END );
	size_t Size = ftell( (FILE*)fp );
	fseek( (FILE*)fp, Position, SEEK_SET );
	
	return Size;
}
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
// Read Data from file //
// - ------------------------------------------------------------------------------------------ - //
inline const size_t read_URLHandle( URLHandle* fp, char* Data, const size_t Size ) {
	return fread( Data, Size, 1, (FILE*)fp );
}
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
#endif // __GEL_CORE_URLHandle_H__ //
// - ------------------------------------------------------------------------------------------ - //
