// - ------------------------------------------------------------------------------------------ - //
// Stream Core - Streams are standard interface for data sources, to share a common syntax. //
// - ------------------------------------------------------------------------------------------ - //
#ifndef __Library_Data_Stream_Core_H__
#define __Library_Data_Stream_Core_H__
// - ------------------------------------------------------------------------------------------ - //
//namespace Data {
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
template<class T>
inline const size_t size_Stream( const T* );
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Opening Stream (Need these for template specialization to work correctly) //
// - ------------------------------------------------------------------------------------------ - //
template<class T>
inline T* open_Stream( const char* /*FileName*/ );
// - ------------------------------------------------------------------------------------------ - //
template<class T>
inline T* open_Stream( const char* /*FileName*/, const char* /*OpenMask = "rb"*/ );
// - ------------------------------------------------------------------------------------------ - //
template<class T>
inline T* open_readonly_Stream( const char* /*FileName*/ );
// - ------------------------------------------------------------------------------------------ - //
template<class T>
inline T* open_writeonly_Stream( const char* /*FileName*/ );
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Closing Stream //
// - ------------------------------------------------------------------------------------------ - //
template<class T>
inline void close_Stream( T* fp );
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
// Templated read functions (read_File<int>( fp );) //
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const Type read_Stream( T* fp );
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const Type readswap_Stream( T* fp );
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const Type readbe_Stream( T* fp );
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const Type readle_Stream( T* fp );
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
template< class T >
inline const size_t read_Stream( T* fp, char* Data, const size_t Size );
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// Templated read functions (read_File<int>( fp );) //
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const size_t write_Stream( T* fp, const Type Data );
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const size_t writeswap_Stream( T* fp, const Type Data );
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const size_t writebe_Stream( T* fp, const Type Data );
// - ------------------------------------------------------------------------------------------ - //
template< class Type, class T >
inline const size_t writele_Stream( T* fp, const Type Data );
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
template< class T >
inline const size_t write_Stream( T* fp, const char* Data, const size_t Size );
// - ------------------------------------------------------------------------------------------ - //


// - ------------------------------------------------------------------------------------------ - //
//}; // namespace Data //
// - ------------------------------------------------------------------------------------------ - //
#endif // __Library_Data_Stream_Core_H__ //
// - ------------------------------------------------------------------------------------------ - //
