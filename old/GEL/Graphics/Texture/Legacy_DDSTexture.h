// - ------------------------------------------------------------------------------------------ - //
// DirectX 9 DDS Texture Format (DX10 is different) //
// - ------------------------------------------------------------------------------------------ - //
// For more info, see: http://msdn.microsoft.com/en-us/library/bb943990(VS.85).aspx //
// - ------------------------------------------------------------------------------------------ - //
#ifndef __DDSTexture_H__
#define __DDSTexture_H__
// - ------------------------------------------------------------------------------------------ - //
// NOTE: According to the original spec, all data is DWORD's. DWORD's are 32bit unsigned numbers. //
// - ------------------------------------------------------------------------------------------ - //
// TODO: Look up flag values //
// TODO: Figure out the exact position of the "Generated By" information (NVTT) //
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// - Required by the Texture Format - //
// - ------------------------------------------------------------------------------------------ - //
// Pixel Encoding Format Information (DDPIXELFORMAT) //
struct DDSPixelFormat {
	unsigned HeaderSize;		// Always 32 (bytes) //
	unsigned Flags;				// Flags that describe the data //
	unsigned FourCC;			// Magic Number describing pixel format ("DXT1", etc) //

	// When an uncompressed RGB or RGBA format, these are valid //
	unsigned RGBBitCount;		// The number of bits per pixel //

	// Bit Masks for describing unconmpressed formats //
	unsigned RedBitMask;		// ARGB -> 0x00FF0000 //
	unsigned GreenBitMask;		// ARGB -> 0x0000FF00 //
	unsigned BlueBitMask;		// ARGB -> 0x000000FF //
	unsigned AlphaBitMask;		// ARGB -> 0xFF000000 //
};
// - ------------------------------------------------------------------------------------------ - //
// Capability Information Flags (DDSCAPS2) //
struct DDSCaps {
	unsigned Caps1;				// Simple Capability Flags (Has Mipmaps, Contains multiple surfaces)
	unsigned Caps2;				// Volumetric and Cubemap Capability Flags //
	unsigned Reserved[2];		// Unusued //
};
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// The DDS Texture Format //
// - ------------------------------------------------------------------------------------------ - //
struct DDSTexture {
	// Top of file //
	unsigned DDS;				// Magic Number "DDS " (space) //
	
	// DDSURFACEDESC2 Chunk //
	unsigned HeaderSize;		// Always 124 (bytes) //
	unsigned Flags;				// Flags that list included information in this file //
	unsigned Height;
	unsigned Width;
	unsigned PitchOrLinearSize;	// Bytes per scanline, or byte size of largest compressed mipmap //
	unsigned Depth;				// Depth of the volumetric texture, otherwise unused //
	unsigned MipMapCount;		// Number of mipmaps used //
	unsigned Reserved1[11];		// *NOTE* May contain undocumented "Generated by" name //
	
	DDSPixelFormat PixelFormat;	// The pixel format //
	DDSCaps Caps;				// The capabilities enabed in this file (Mipmaps, Cubemaps, ...) //
	unsigned Reserved2;

	// The rest of the file //
	unsigned char Data[0];		// Everything following is Data //
};
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// DDS Texture Flags //
// - ------------------------------------------------------------------------------------------ - //
#define DDS_CAPS			??		// Has Capabilities Section (required) //
#define DDS_HEIGHT			??		// Has Height (required) //
#define DDS_WIDTH			??		// Has Width (required) //
#define DDS_PITCH			??		// Has a Pitch provided for an uncompressed texture //
#define DDS_LINEARSIZE		??		// Has a Linear Size provided for the top compressed mipmap //
#define DDS_DEPTH			??		// Has a Depth //
#define DDS_PIXELFORMAT		??		// Has Pixel Format Section (required) //
#define DDS_MIPMAPCOUNT		??		// Has a Mipmap Count //
// - ------------------------------------------------------------------------------------------ - //
#define DDS_DEFAULT			(DDS_CAPS|DDS_HEIGHT|DDS_WIDTH|DDS_PIXELFORMAT)
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// DDS Pixel Format Flags //
// - ------------------------------------------------------------------------------------------ - //
#define DDSPF_RGB			??		// Uncompressed RGB Data //
#define DDSPF_ALPHAPIXELS	??		// Texture contains Alpha Data //
#define DDSPF_FOURCC		??		// Texture contains Compressed Data, FourCC says what kind //
// - ------------------------------------------------------------------------------------------ - //
#define DDSPF_DEFAULT		0
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
// DDS Capability Flags //
// - ------------------------------------------------------------------------------------------ - //
#define DDSCAPS1_COMPLEX	??		// File contains multiple surfaces (mipmaps, cubemaps, etc) //
#define DDSCAPS1_MIPMAP		??		// File contains mipmaps //
#define DDSCAPS1_TEXTURE	??		// Says the file contains texture information (required) //
// - ------------------------------------------------------------------------------------------ - //
#define DDSCAPS1_DEFAULT	(DDSCAPS1_TEXTURE)
// - ------------------------------------------------------------------------------------------ - //
#define DDSCAPS2_VOLUME		??		// File contains volumetric textures //
#define DDSCAPS2_CUBEMAP	??		// File contains cubemaps //
#define DDSCAPS2_CUBEMAP_POSITIVEX	??
#define DDSCAPS2_CUBEMAP_NEGATIVEX	??
#define DDSCAPS2_CUBEMAP_POSITIVEY	??
#define DDSCAPS2_CUBEMAP_NEGATIVEY	??
#define DDSCAPS2_CUBEMAP_POSITIVEZ	??
#define DDSCAPS2_CUBEMAP_NEGATIVEZ	??
// - ------------------------------------------------------------------------------------------ - //
#define DDSCAPS2_DEFAULT	0
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
#endif // __DDSTexture_H__ //
// - ------------------------------------------------------------------------------------------ - //
